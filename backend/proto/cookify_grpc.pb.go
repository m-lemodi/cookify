// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: cookify.proto

package cookify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cookify_SayHello_FullMethodName      = "/cookify.Cookify/SayHello"
	Cookify_CreateRecipe_FullMethodName  = "/cookify.Cookify/CreateRecipe"
	Cookify_GetRecipe_FullMethodName     = "/cookify.Cookify/GetRecipe"
	Cookify_ListRecipes_FullMethodName   = "/cookify.Cookify/ListRecipes"
	Cookify_SearchRecipes_FullMethodName = "/cookify.Cookify/SearchRecipes"
)

// CookifyClient is the client API for Cookify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type CookifyClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	CreateRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*Recipe, error)
	GetRecipe(ctx context.Context, in *Ingredients, opts ...grpc.CallOption) (*Recipe, error)
	ListRecipes(ctx context.Context, in *Ingredients, opts ...grpc.CallOption) (*RecipeList, error)
	SearchRecipes(ctx context.Context, in *Ingredients, opts ...grpc.CallOption) (*RecipeList, error)
}

type cookifyClient struct {
	cc grpc.ClientConnInterface
}

func NewCookifyClient(cc grpc.ClientConnInterface) CookifyClient {
	return &cookifyClient{cc}
}

func (c *cookifyClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Cookify_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookifyClient) CreateRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Recipe)
	err := c.cc.Invoke(ctx, Cookify_CreateRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookifyClient) GetRecipe(ctx context.Context, in *Ingredients, opts ...grpc.CallOption) (*Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Recipe)
	err := c.cc.Invoke(ctx, Cookify_GetRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookifyClient) ListRecipes(ctx context.Context, in *Ingredients, opts ...grpc.CallOption) (*RecipeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeList)
	err := c.cc.Invoke(ctx, Cookify_ListRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookifyClient) SearchRecipes(ctx context.Context, in *Ingredients, opts ...grpc.CallOption) (*RecipeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeList)
	err := c.cc.Invoke(ctx, Cookify_SearchRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CookifyServer is the server API for Cookify service.
// All implementations should embed UnimplementedCookifyServer
// for forward compatibility.
//
// The greeting service definition.
type CookifyServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	CreateRecipe(context.Context, *Recipe) (*Recipe, error)
	GetRecipe(context.Context, *Ingredients) (*Recipe, error)
	ListRecipes(context.Context, *Ingredients) (*RecipeList, error)
	SearchRecipes(context.Context, *Ingredients) (*RecipeList, error)
}

// UnimplementedCookifyServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCookifyServer struct{}

func (UnimplementedCookifyServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedCookifyServer) CreateRecipe(context.Context, *Recipe) (*Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedCookifyServer) GetRecipe(context.Context, *Ingredients) (*Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipe not implemented")
}
func (UnimplementedCookifyServer) ListRecipes(context.Context, *Ingredients) (*RecipeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipes not implemented")
}
func (UnimplementedCookifyServer) SearchRecipes(context.Context, *Ingredients) (*RecipeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecipes not implemented")
}
func (UnimplementedCookifyServer) testEmbeddedByValue() {}

// UnsafeCookifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CookifyServer will
// result in compilation errors.
type UnsafeCookifyServer interface {
	mustEmbedUnimplementedCookifyServer()
}

func RegisterCookifyServer(s grpc.ServiceRegistrar, srv CookifyServer) {
	// If the following call pancis, it indicates UnimplementedCookifyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cookify_ServiceDesc, srv)
}

func _Cookify_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookifyServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookify_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookifyServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookify_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recipe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookifyServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookify_CreateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookifyServer).CreateRecipe(ctx, req.(*Recipe))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookify_GetRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ingredients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookifyServer).GetRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookify_GetRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookifyServer).GetRecipe(ctx, req.(*Ingredients))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookify_ListRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ingredients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookifyServer).ListRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookify_ListRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookifyServer).ListRecipes(ctx, req.(*Ingredients))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookify_SearchRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ingredients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookifyServer).SearchRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookify_SearchRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookifyServer).SearchRecipes(ctx, req.(*Ingredients))
	}
	return interceptor(ctx, in, info, handler)
}

// Cookify_ServiceDesc is the grpc.ServiceDesc for Cookify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cookify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cookify.Cookify",
	HandlerType: (*CookifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Cookify_SayHello_Handler,
		},
		{
			MethodName: "CreateRecipe",
			Handler:    _Cookify_CreateRecipe_Handler,
		},
		{
			MethodName: "GetRecipe",
			Handler:    _Cookify_GetRecipe_Handler,
		},
		{
			MethodName: "ListRecipes",
			Handler:    _Cookify_ListRecipes_Handler,
		},
		{
			MethodName: "SearchRecipes",
			Handler:    _Cookify_SearchRecipes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cookify.proto",
}
